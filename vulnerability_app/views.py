import re

from django.contrib.auth import logout, authenticate, login
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render

# Create your views here.
from django.urls import reverse

from vulnerability_app.forms import UserForm, UserProfileInfoForm
from vulnerability_app.models import AccessedPage, SafeDomain


def index(request):
    return render(request, 'vulnerability_app/index.html')


@login_required
def special(request):
    return HttpResponse("You are logged in !")


@login_required
def user_logout(request):
    logout(request)
    return HttpResponseRedirect(reverse('index'))


def register(request):
    registered = False
    if request.method == 'POST':
        user_form = UserForm(data=request.POST)
        profile_form = UserProfileInfoForm(data=request.POST)
        if user_form.is_valid() and profile_form.is_valid():
            user = user_form.save()
            user.set_password(user.password)
            user.save()
            profile = profile_form.save(commit=False)
            profile.user = user
            profile.save()
            registered = True
        else:
            print(user_form.errors, profile_form.errors)
    else:
        user_form = UserForm()
        profile_form = UserProfileInfoForm()
    return render(request, 'vulnerability_app/registration.html',
                  {'user_form': user_form,
                   'profile_form': profile_form,
                   'registered': registered})


def user_login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(username=username, password=password)
        if user:
            if user.is_active:
                login(request, user)
                return HttpResponseRedirect(reverse('index'))
            else:
                return HttpResponse("Your account was inactive.")
        else:
            print("Someone tried to login and failed.")
            print("They used username: {} and password: {}".format(username, password))
            return HttpResponse("Invalid login details given")
    else:
        return render(request, 'vulnerability_app/login.html', {})


def highchart_example(request):
    return render(
        request, "vulnerability_app/highchart_example.html", {})


def get_safe_domains():
    return SafeDomain.objects.all()


def domain_is_valid(url: str) -> bool:
    safe_domains = set(safe_domain.domain for safe_domain in get_safe_domains())
    domain_regex = "^https?:\/\/([0-9a-zA-Z.-]+)\/"
    try:
        url_domain = re.search(domain_regex, url).group(1)
    except AttributeError:
        return False
    if url_domain not in safe_domains:
        return False
    return True


def validate_urls(request):
    all_accessed_pages = AccessedPage.objects.all()
    invalid = []
    valid = []
    for page in all_accessed_pages:
        if not domain_is_valid(page.url):
            invalid.append(page)
        else:
            valid.append(page)
    print(valid, invalid)
    return render(request,
                  "vulnerability_app/validate_urls.html",
                  {"valid_urls": valid,
                   "invalid_urls": invalid,
                   "stats": {
                       "malicious": [len(invalid)*10, len(invalid)*12, len(invalid)*15],
                       "safe": [len(valid)*30, len(valid)*35, len(valid)*50]
                    }
                   }
                  )
