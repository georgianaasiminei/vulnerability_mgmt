import calendar
import json
import os
import random
import re
import socket
import struct
from datetime import date, datetime
from dateutil import rrule, relativedelta
from typing import List

from django.contrib.auth import logout, authenticate, login
from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator, PageNotAnInteger, EmptyPage
from django.db.models import Count
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render

# Create your views here.
from django.urls import reverse

from vulnerability_app.forms import UserForm, UserProfileInfoForm
from vulnerability_app.models import Url, SafeDomain, UrlType


def index(request):
    return render(request, 'vulnerability_app/index.html')


@login_required
def special(request):
    return HttpResponse("You are logged in !")


@login_required
def user_logout(request):
    logout(request)
    return HttpResponseRedirect(reverse('index'))


def register(request):
    registered = False
    if request.method == 'POST':
        user_form = UserForm(data=request.POST)
        profile_form = UserProfileInfoForm(data=request.POST)
        if user_form.is_valid() and profile_form.is_valid():
            user = user_form.save()
            user.set_password(user.password)
            user.save()
            profile = profile_form.save(commit=False)
            profile.user = user
            profile.save()
            registered = True
        else:
            print(user_form.errors, profile_form.errors)
    else:
        user_form = UserForm()
        profile_form = UserProfileInfoForm()
    return render(request, 'vulnerability_app/registration.html',
                  {'user_form': user_form,
                   'profile_form': profile_form,
                   'registered': registered})


def user_login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(username=username, password=password)
        if user:
            if user.is_active:
                login(request, user)
                return HttpResponseRedirect(reverse('index'))
            else:
                return HttpResponse("Your account was inactive.")
        else:
            print("Someone tried to login and failed.")
            print("They used username: {} and password: {}".format(username, password))
            return HttpResponse("Invalid login details given")
    else:
        return render(request, 'vulnerability_app/login.html', {})


def highchart_example(request):
    return render(
        request, "vulnerability_app/highchart_example.html", {})


def get_safe_domains():
    return SafeDomain.objects.all()


def domain_is_valid(url: str) -> bool:
    domain_regex = "^https?:\/\/([0-9a-zA-Z.-]+)\/"
    #  Check if the url's domain matches the given regex
    try:
        re.search(domain_regex, url).group(1)
    except AttributeError:
        return False
    # Check if the url'domain contains more then 3 dot(.) characters
    if url.count(".") > 3:
        return False
    # if url_domain not in set(safe_domain.domain for safe_domain in get_safe_domains()):
    #     return False
    return True


def read_from_file():
    directory = "./data"
    url_list = []
    url_types = []
    for filename in os.listdir(directory):
        url_type = UrlType(name=filename.split("_")[0])
        url_types.append(url_type)
        with open(filename, "r") as f:
            urls = f.readlines()
            for url in urls:
                new_url = Url(url_type=url_type)
                url_list.append(new_url)

    return url_list, url_types


def generate_models(count: int) -> List[Url]:
    result = []
    for i in range(count):
        new_page = Url(url="https://google.com/?dafda&Dsbjh=23",
                       accessed_on=date(day=random.randrange(1, 30), month=random.randrange(1, 7), year=2020),
                       cookies="dsjhjghdsufye476t13tr7uy24923urhf",
                       ip=socket.inet_ntoa(struct.pack('>I', random.randint(1, 0xffffffff))),
                       secured=True)
        result.append(new_page)

    return result


def display_tables(request):
    all_accessed_pages = Url.objects.all()

    result = all_accessed_pages[:101]

    page = request.GET.get('page', 1)
    paginator = Paginator(result, 10)

    try:
        result = paginator.page(page)
    except PageNotAnInteger:
        result = paginator.page(1)
    except EmptyPage:
        result = paginator.page(paginator.num_pages)
    return render(request,
                  "vulnerability_app/validate_urls.html",
                  {"all_accessed_pages": result}
                  )


def classification(request):
    quarter1 = Url.objects.values('url_type').filter(accessed_on__range=["2020-01-01", "2020-03-31"]).annotate(
        count=Count("path"))
    quarter2 = Url.objects.values('url_type').filter(accessed_on__range=["2020-04-01", "2020-06-30"]).annotate(
        count=Count("path"))
    quarter3 = Url.objects.values('url_type').filter(accessed_on__range=["2020-07-01", "2020-09-30"]).annotate(
        count=Count("path"))
    quarter4 = Url.objects.values('url_type').filter(accessed_on__range=["2020-10-01", "2020-12-31"]).annotate(
        count=Count("path"))

    url_types_mappings = dict()
    for url_type in UrlType.objects.all():
        url_types_mappings[url_type.name] = url_type.id

    print("LALALLALA: ", url_types_mappings)
    print("DADADADAD: ", list(url_types_mappings.keys()))

    categories = [key.upper() for key in url_types_mappings.keys()]

    q1 = [item["count"] for item in quarter1]
    q2 = [item["count"] for item in quarter2]
    q3 = [item["count"] for item in quarter3]
    q4 = [item["count"] for item in quarter4]

    return render(request,
                  "vulnerability_app/validate_urls.html",
                  {"urls_categories": json.dumps(categories),
                   "q1": q1,
                   "q2": q2,
                   "q3": q3,
                   "q4": q4,
                   }
                  )


def monthly_report(request):
    result = []
    for m in range(1, 13):
        # Take into account only the phishing URLs
        by_month = Url.objects.filter(url_type=26).filter(accessed_on__month=m).all()
        valid = []
        invalid = []
        for url in by_month:
            if domain_is_valid(url.path):
                valid.append(url)
            else:
                invalid.append(url)
        result.append([len(valid), len(invalid)])

    safe_urls = {"name": "Safe", "data": [item[0] for item in result]}
    malicious_urls = {"name": "Malicious", "data": [item[1] for item in result]}

    return render(request,
                  "vulnerability_app/monthly_report.html",
                  {
                   "categories": json.dumps(list(calendar.month_name[1:])),
                   "safe_urls": safe_urls,
                   "malicious_urls": malicious_urls
                   }
                  )

